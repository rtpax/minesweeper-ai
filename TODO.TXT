
FEATURES

PRIORITY: HIGH
****create algorithm for determining how likely a given cell is to a bomb
****create algorithm for determining how much payout a given cell is likely to have
****create algorithm for combining those two likelyhoods to make decisions
****add autodepency to make files (and get rid of my ad hoc header dependency method)


PRIORITY: MEDIUM
****when running make, create release, debug, and tests all in one go.
~   decide how much of the license text to add to each file and do that
****increase speed! bottleneck is in lazy_aux_regions, was only so slow after adding the
    "remaining" region in solver::find_base_regions. I want that info though, so focus
    on other optimizations
    Note:   currently the program forgoes using the remaining region until it is very small,
            This promotes speed, but is very often not as useful.
****along the speed vein... create a recently modified region set so that each time
    find_aux_regions is started we don't have to check everything
****carry over likelyhood data to next iteration or make it really fast to calculate
    NOTE: is just really fast (payout data on the other hand...)
****pull out regions and kell_keys (and possibly the queues) into a seperate container
    class to seperate the logic
~   let solver look forward more than just one move

PRIORITY: LOW
~   use computer vision software to play on an actual minesweeper board
~   mark all bombs as flag after winning, rather than leaving hidden (implemented by solver, not grid)

BUGS

PRIORITY: HIGH
***?find SEGFAULT source (all i know is something to do with the std::set in region, 
    I think upon attempting to copy a bad one)
    UPDATE: used to occur semi frequently, now does not occur at all. Tentatively marking as solved
    Date: approx 8/16/2018
***?find floating point exception source (divide by zero). Sometimes happens as late
    as after printing the complete board, often earlier
    UPDATE: used to occur semi frequently, now does not occur at all. Tentatively marking as solved
    Date: approx 8/10/2018
***?Solver attempted to open last hidden cell which it should have known was bomb.
    Either it flagged something incorrectly, or counted incorrectly, or black magic.
    Note: it has always happend at (0,0) when it happens, and the gamestate is LOST.
    based on debug output it seems to go to random selection after being unable to find 
    guarantees.
         --------------------
        | * F F 3 2 2 1 0 0 0 |
        | 1 3 F 3 F F 1 0 0 0 |
        | 2 4 3 3 2 2 2 2 3 2 |
        | F F F 1 0 0 1 F F F |
        | 2 3 2 1 0 1 2 4 F 3 |
        | 0 0 0 1 1 2 F 2 1 1 |
        | 1 1 0 2 F 3 2 3 2 1 |
        | F 1 1 3 F 2 1 F F 2 |
        | 1 1 1 F 2 1 1 3 F 2 |
         --------------------
    UPDATE: had runs where last cell unopened was at 0,0 and did not attempt to open, and won instead.
            Tentatively marking as solved
    Date: 8/20/2018
****Program ended early without diagnostic, console argument and output:
        $ echo solve | ./sweep
        enter input of the form 'row, column':
        [1/1].*
        [2/2]..*
        [22/22]
        [17/17]
    SOLVED: caused by a call to exit(1) added for debugging
    Date: 8/20/2018
***?Assertion failed in solver:remove_bomb_from_all_regions, (same has happened with safe)
        assertion "err != 2 && "Attempted to remove bomb from region 
        with no bombs"" failed: file "solver.cpp", line 359, function: 
        int ms::solver::remove_bomb_from_all_regions(ms::rc_coord)
    UPDATE: used to occur semi frequently, now does not occur at all. Tentatively marking as solved
    Date: 8/21/2018
***?Assertion failed in region::order_preserve_merge_to,
        assertion "is_reasonable()" failed: file "region.cpp", line
        285, function: void ms::region::order_preserve_merge_to(const 
        ms::region&) const
    UPDATE: used to occur semi frequently, now does not occur at all. Tentatively marking as solved
    Date: 8/21/2018
****Segfault when trying to solve very large grid. Bug occurred consistently with size
        ms::solver ai(272,330,4800);
    Error in grid.cpp at line 29 with contents 
        if (!(rr == 0 && cc == 0) && iscontained(row + rr, col + cc)) {
    according to gdb
    Update: stackdump says stackoverflow
    Update: it's not about size, I can do grids as large as 1000,1000 with no segfault
            backtrace has repeated calls to grid::open__, alternating between the two recursive
            call points
    SOLVED: Changed grid::open__ to be non-recursive, for large grids with a lot of zeros the depth
            of calls is too much
    Date: 8/30/2018

PRIORITY: MEDIUM
~   Program does not exit on Ctrl-C (it used to, no new libraries linked)
    Can still recieve SIGINT from gdb
    Date: 8/21/2018

PRIORITY: LOW
~   Program can freeze computer by consuming too much memory on large boards/overly
    hungry algorithms. Prefer to give up early instead of this



